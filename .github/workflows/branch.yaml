name: PR Checks
run-name: ${{ github.actor }} is running checks.
on:
  pull_request:


jobs:
  test:
    name: Test Everything
    uses: ./.github/workflows/lint_and_test.yaml

  delete_deployments:
    name: Delete Deployments
    runs-on: ubuntu-latest
    permissions:
      deployments: write
    steps:
      - uses: actions/checkout@v2
      - name: Delete Previous deployments
        uses: actions/github-script@v6
        with:
          script: |
            const deployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha
            });
            await Promise.all(
              deployments.data.map(async (deployment) => {
                await github.rest.repos.createDeploymentStatus({ 
                  owner: context.repo.owner, 
                  repo: context.repo.repo, 
                  deployment_id: deployment.id, 
                  state: 'inactive' 
                });
                return github.rest.repos.deleteDeployment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  deployment_id: deployment.id
                });
              })
            );
  
  terraform:
    strategy:
      matrix:
        environment: [staging, production]
    permissions:
      pull-requests: write
      deployments: write
    name: Terraform
    runs-on: ubuntu-latest
    needs: test
    environment: ${{ matrix.environment }}
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_ENV: ${{ matrix.environment }}
      TF_VAR_PSQL_USERNAME: ${{ secrets.PSQL_USERNAME }}
      TF_VAR_PSQL_PASSWORD: ${{ secrets.PSQL_PASSWORD }}
    defaults:
      run:
        working-directory: terraform
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v2
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      - name: Terraform init
        run: terraform init -backend-config="resource_group_name=Cloud-Final-Project-${{ matrix.environment }}" -backend-config="storage_account_name=berkelifpstate${{ matrix.environment }}"
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        run: terraform plan -out workspace.plan
        continue-on-error: true          
      - name: Post Plan
        if: always() && github.ref != 'refs/heads/master' && (steps.plan.outcome == 'success' || steps.plan.outcome == 'failure')
        uses: robburger/terraform-pr-commenter@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TF_WORKSPACE: ${{ matrix.environment }}
        with:
          commenter_type: plan
          commenter_input: ${{ format('{0}{1}', steps.plan.outputs.stdout, steps.plan.outputs.stderr) }}
          commenter_exitcode: ${{ steps.plan.outputs.exitcode }}